class Child {
    private boolean cry = false;
    private List<Observer> observers = new LinkedList<>();
    {
        observers.add(new Dad());
        observers.add(new Mum());
        observers.add(new Dog());
    }

    public boolean isCry() {
        return cry;
    }

    public void wakeUp() {
        cry = true;
        System.out.println("crying....");

        WakeUpEvent event = new WakeUpEvent(System.currentTimeMillis(), "bed", this);
        for (Observer o:observers) {
            o.actionOnWakeUp(event);
        }
    }
}

interface Observer {
    void actionOnWakeUp(WakeUpEvent e);
}

class Dad implements Observer {
    public void feed() {
        System.out.println("dad feeding......");
    }

    @Override
    public void actionOnWakeUp(WakeUpEvent e) {
        feed();
    }
}

class Mum implements Observer {
    public void hub() {
        System.out.println("mum hugging......");
    }

    @Override
    public void actionOnWakeUp(WakeUpEvent e) {
        hub();
    }
}

class Dog implements Observer {
    public void wang() {
        System.out.println("dog wang......");
    }

    @Override
    public void actionOnWakeUp(WakeUpEvent e) {
        wang();
    }
}

abstract class Event<T> {
    abstract T getSource();
}

class WakeUpEvent extends Event<Child> {
    long timestamp;
    String loc;
    Child source;

    public WakeUpEvent(long timestamp, String loc, Child source) {
        this.timestamp = timestamp;
        this.loc = loc;
        this.source = source;
    }

    @Override
    Child getSource() {
        return source;
    }
}

public class Main {
    public static void main(String[] args) {
        Child c = new Child();
        c.wakeUp();
    }
}

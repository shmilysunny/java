策略模式
public class Cat {
	int height;
	int weight;
	
	public Cat(int height, int weight) {
		super();
		this.height = height;
		this.weight = weight;
	}
}

import java.util.Comparator;

public class CatHeightComparator implements Comparator<Cat> {
	@Override
	public int compare(Cat c1, Cat c2) {
		if (c1.height > c2.height) return 1;
		else if (c1.height < c2.height) return -1;
		return 0;
	}
}

public class CatWeightComparator implements Comparator<Cat> {
	@Override
	public int compare(Cat c1, Cat c2) {
		if (c1.weight > c2.weight) return 1;
		else if (c1.weight < c2.weight) return -1;
		return 0;
	}
}

public class Sort<T> {
	public void sort2(T[] ary, Comparator<T> c) {
		for (int i = ary.length - 1; i >= 0; i--) {
			for (int j = 0; j < i; j++) {
				if (c.compare(ary[j], ary[j+1]) > 0) {
					T tmp = ary[j+1];
					ary[j+1] = ary[j];
					ary[j] = tmp;
				}
			}
		}
	}
}

public class Main {
	public static void main(String[] args) {
		Cat[] ary = {new Cat(3, 2), new Cat(5, 4), new Cat(1, 3)};
		
		Sort<Cat> sort2 = new Sort<>();
		sort2.sort2(ary, new CatHeightComparator());
		System.out.println(Arrays.toString(ary));
		
		Sort<Cat> sort3 = new Sort<>();
		sort3.sort2(ary, new CatWeightComparator());
		System.out.println(Arrays.toString(ary));
	}
}

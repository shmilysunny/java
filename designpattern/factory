SimpleFactory
public interface Moveable {
	public void go();
}
public class Car implements Moveable {
	public void go() {
		System.out.println("car go....");
	}
}
public class Plane implements Moveable {
	public void go() {
		System.out.println("Plane go....");
	}
}
public class SimpleVehicleFactory {
	public Car creatCar() {
		return new Car();
	}
	public Plane creatPlane() {
		return new Plane();
	}
}
public class Main {
	public static void main(String[] args) {
		Moveable m = new SimpleVehicleFactory().creatCar();
		m.go();
		Moveable m2 = new SimpleVehicleFactory().creatPlane();
		m2.go();
	}
}

factorymethod
public interface Moveable {
	public void go();
}
public class Car implements Moveable {
	public void go() {
		System.out.println("car go....");
	}
}
public class CarFactory {
	public Moveable create() {
		return new Car();
	}
}
public class Plane implements Moveable {
	public void go() {
		System.out.println("Plane go....");
	}
}
public class PlaneFactory {
	public Moveable create() {
		return new Plane();
	}
}
public class Main {
	public static void main(String[] args) {
		Moveable m = new CarFactory().create();
		m.go();
		Moveable m2 = new PlaneFactory().create();
		m2.go();
	}
}

abstractfactory
public abstract class Vehicle {
	abstract void go();
}
public abstract class Weapon {
	abstract void shoot();
}
public abstract class AbstractFactory {
	public abstract Weapon getWeapon();
	public abstract Vehicle getVehicle();
}
public class Car extends Vehicle {
	public void go() {
		System.out.println("car go....");
	}
}
public class AK47 extends Weapon {
	public void shoot() {
        System.out.println("tututututu....");
    }
}
public class MordenFactory extends AbstractFactory {
	@Override
	public Weapon getWeapon() {
		return new AK47();
	}
	@Override
	public Vehicle getVehicle() {
		return new Car();
	}
}
public class Broom extends Vehicle {
	public void go() {
		System.out.println("Broom go....");
	}
}
public class MagicStick extends Weapon {
	public void shoot() {
        System.out.println("diandian....");
    }
}
public class MagicFactory extends AbstractFactory{
	@Override
	public Weapon getWeapon() {
		return new MagicStick();
	}
	@Override
	public Vehicle getVehicle() {
		return new Broom();
	}
}
public class Main {
	public static void main(String[] args) {
		AbstractFactory f = new MordenFactory();
		Weapon w = f.getWeapon();
		w.shoot();
		Vehicle v = f.getVehicle();
		v.go();
		
		AbstractFactory f2 = new MagicFactory();
		Weapon w2 = f2.getWeapon();
		w2.shoot();
		Vehicle v2 = f2.getVehicle();
		v2.go();
	}
}

/**
 * 饿汉式
 * 类加载到内存后，就实例化一个单例，JVM线程安全
 * 简单实用，推荐使用
 * 唯一缺点：无论用到与否，类加载后就完成实例化
 */
public class Mgr01 {
    private static final Mgr01 INSTANCE = new Mgr01();
    private Mgr01() {};
    public static Mgr01 getInstance() {
      return INSTANCE;
    }
    // 测试
    public static void main(String[] args) {
        Mgr01 m1 = Mgr01.getInstance();
        Mgr01 m2 = Mgr01.getInstance();
        System.out.println(m1 == m2);// true
    }
}

/**
 * 同上
 */
public class Mgr02 {
    private static final Mgr01 INSTANCE;
    static {
		INSTANCE = new Mgr02();
	}
    private Mgr01() {};
    public static Mgr01 getInstance() {
      return INSTANCE;
    }
}

/**
 * 懒汉式
 * 虽然达到了按需初始化的问题，但也带来了线程不安全的问题
 */
public class Mgr03 {
    // 不能加final，final变量必须被初始化，不初始化就需要加静态代码块，如上
	private static Mgr03 INSTANCE;
	private Mgr03() {}
	public static Mgr03 getInstance() {
		if (INSTANCE == null) {
            // 测试
//			try {
//				Thread.sleep(1);
//			} catch (InterruptedException e) {
//				// TODO Auto-generated catch block
//			}
			INSTANCE = new Mgr03();
		}
		return INSTANCE;
	}
    // 测试
	public static void main(String[] args) {
		for (int i = 0; i < 100; i++) {
			new Thread(
				() -> {
					System.out.println(Mgr03.getInstance().hashCode());
				}
			).start();
		}
	}
}

/**
 * 懒汉式
 * 虽然达到了按需初始化的问题，但也带来了线程不安全的问题
 * 可以通过synchronized解决，但同时带来了效率下降的问题
 */
public class Mgr04 {
    // 不能加final，final变量必须被初始化，不初始化就需要加静态代码块，如上
	private static Mgr04 INSTANCE;
	private Mgr04() {}
    // synchronized锁定的是当前对象，因为是静态对象，所以锁定的是Mgr04.class这个对象
	public static synchronized Mgr04 getInstance() {
		if (INSTANCE == null) {
            // 测试
//			try {
//				Thread.sleep(1);
//			} catch (InterruptedException e) {
//				e.printStackTrace();
//			}
			INSTANCE = new Mgr04();
		}
		return INSTANCE;
	}
    // 测试
	public static void main(String[] args) {
		for (int i = 0; i < 100; i++) {
			new Thread(
				() -> {
					System.out.println(Mgr04.getInstance().hashCode());
				}
			).start();
		}
	}
}

/**
 * 懒汉式
 * 虽然达到了按需初始化的问题，但也带来了线程不安全的问题
 * 可以通过synchronized解决，但同时带来了效率下降的问题
 */
public class Mgr05 {
	private static Mgr05 INSTANCE;
	private Mgr05() {}
	public static Mgr05 getInstance() {
		if (INSTANCE == null) {
            // 妄图通过缩小同步代码块粒度的方式提高效率，但并不可行
			synchronized (Mgr05.class) {
                // 测试
    //			try {
    //				Thread.sleep(1);
    //			} catch (InterruptedException e) {
    //				e.printStackTrace();
    //			}
				INSTANCE = new Mgr05();
			}
		}
		return INSTANCE;
	}
    // 测试
	public static void main(String[] args) {
		for (int i = 0; i < 100; i++) {
			new Thread(
				() -> {
					System.out.println(Mgr05.getInstance().hashCode());
				}
			).start();
		}
	}
}

/**
 * 懒汉式
 * 虽然达到了按需初始化的问题，但也带来了线程不安全的问题
 * 可以通过synchronized解决，但同时带来了效率下降的问题，相对完美
 */
public class Mgr06 {
	private static Mgr06 INSTANCE;
	private Mgr06() {}
	public static Mgr06 getInstance() {
		if (INSTANCE == null) {
			synchronized (Mgr06.class) {
                // 双重检查
				if (INSTANCE == null) {
                    // 测试
        //			try {
        //				Thread.sleep(1);
        //			} catch (InterruptedException e) {
        //				e.printStackTrace();
        //			}
					INSTANCE = new Mgr06();
				}
			}
		}
		return INSTANCE;
	}
    // 测试
	public static void main(String[] args) {
		for (int i = 0; i < 100; i++) {
			new Thread(
				() -> {
					System.out.println(Mgr06.getInstance().hashCode());
				}
			).start();
		}
	}
}

/**
 * 静态内部类方式
 * JVM保真单例
 * 外部类加载时不会加载静态内部类，这样可以实现懒加载，比方式一完美
 */
public class Mgr07 {
	private Mgr07() {}
	private static class Mgr07Holder {
		private static final Mgr07 INSTANCE = new Mgr07();
	}
	public static Mgr07 getInstance() {
		return Mgr07Holder.INSTANCE;
	}
    // 测试
	public static void main(String[] args) {
		for (int i = 0; i < 100; i++) {
			new Thread(
				() -> {
					System.out.println(Mgr06.getInstance().hashCode());
				}
			).start();
		}
	}
}

/**
 * 不仅可以解决线程同步，还可以防止反序列化
 */
public enum Mgr08 {
	INSTANCE;
    // 测试
	public static void main(String[] args) {
		for (int i = 0; i < 100; i++) {
			new Thread(
				() -> {
					System.out.println(Mgr08.INSTANCE.hashCode());
				}
			).start();
		}
	}
}

中文名称  英文名称    平均时间复杂度  最坏时间复杂度  最好时间复杂度  空间复杂度  稳定性
选择排序  selection  n²            n²            n²            1          不稳
冒泡排序  bubble     n²            n²            n             1          稳
插入排序  insertion  n²            n²            n             1          稳
堆排序    heop       nlog2n        nlog2n        nlog2n        1          不稳
希尔排序  shell      n1.3          n²            n             1          不稳
归并排序  merge      nlog2n        nlog2n        nlog2n        n          稳
快速排序  quick      nlog2n        n²            nlog2n        log2n      不稳
桶排序    buckel     n+k           n²            n             n+k        稳
计数排序  couting    n+k           n+k           n+k           n+k        稳
基数排序  radix      n*k           n*k           n*k           n+k        稳

选泡插
快归堆希统计基
恩方恩老恩一三
对恩加K恩乘K
不稳稳稳不稳稳
不稳不稳稳稳稳

选择排序（第一个跟剩下里最小的比较）
public static void main(String[] args) {
  int ary[] = new int[] {9, 6, 1, 3, 5};
  for (int i = 0; i < ary.length-1; i++) {
    int minPos = i;
    for (int j = i+1; j < ary.length; j++) {
      if (ary[minPos] > ary[j]) {
        minPos = j;
      }
      // (n-1)+(n-2)+(n-3)+...+1
    }
    int tmp = ary[i];
    ary[i] = ary[minPos];
    ary[minPos] = tmp;
  }
}
冒泡排序（前一个跟后一个比较，循环长度依次递减）
public static void main(String[] args) {
    int[] ary = new int[] {9, 6, 1, 3, 5};
    for (int i = ary.length-1; i > 0; i--) {
        for (int j = 0; j < i; j++) {
            if (ary[j] > ary[j+1]) {
                int tmp = ary[j+1];
                ary[j+1] = ary[j];
                ary[j] = tmp;
            }
            // (n-1)+(n-2)+(n-3)+...+1
        }
    }
}
插入排序（后一个跟前一个比）
public static void main(String[] args) {
  int ary[] = new int[] {9, 6, 1, 3, 5};
  for (int i = 1; i < ary.length; i++) {
    for (int j = i; j > 0; j--) {
      if (ary[j] < ary[j-1]) {
        int tmp = ary[j];
        ary[j] = ary[j-1];
        ary[j-1] = tmp;
      }
    }
  }
}
简单排序总结：
冒泡：基本不用，太慢
选择：基本不用，不稳
插入：样本小且基本有序的时候效率比较高

希尔排序
public static void main(String[] args) {
  int ary[] = new int[] {9, 6, 11, 3, 5, 12, 8, 7, 10, 15, 14, 4, 1, 13, 2};

  int h = 1;
  while(h <= ary.length/3) {
    h=h*3+1;  //Knuth序列
  }
  for (int gap = h; gap > 0; gap = (gap-1)/3) {
    for (int i = gap; i < ary.length; i++) {
      for (int j = i; j > gap-1; j-=gap) {
        if (ary[j] < ary[j-gap]) {
          int temp = ary[j-gap];
          ary[j-gap] = ary[j];
          ary[j] = temp;
        }
      }
    }
  }
}

归并排序
java对于对象的排序就是归并排序，请求用原来旧归排，不请求时用timsort多路归并(小于最小值32时直接用二分插入排序)
对于基本类型的排序是双轴快排
public static void main(String[] args) {
  int ary[] = new int[] {1, 3, 5, 2, 4, 8, 9, 10, 11};

  sort(ary, 0, 6);

  merge(ary, 0, 4, ary.length-1);

  for (int temp : ary) {
    System.out.print(temp + " ");
  }
  System.out.println();

}

static void sort(int[] ary, int left, int right) {
  if (left == right) return;

  int mid = left + (right-left)/2;

  sort(ary, left, mid);

  sort(ary, mid+1, right);

  merge(ary, left, mid, right);
}

static void merge(int[] ary, int left, int midpos, int right) {
  int temp[] = new int[right-left+1];

  int mid = midpos;

  int i = left;
  int j = mid + 1;
  int k = 0;

  while (i <= mid && j <= right) {
    if (ary[i] > ary[j]) {
      temp[k++] = ary[j++];
    } else {
      temp[k++] = ary[i++];
    }
  }
  while (i <= mid) {
    temp[k++] = ary[i++];
  }
  while (j <= right) {
    temp[k++] = ary[j++];
  }

  for(int m = 0; m < temp.length; m++) {
    ary[left + m] = temp[m];
  }
}

排序中最快的算法--快速排序
改进的快速排序--双轴快排
public static void main(String[] args) {
  int ary[] = new int[] {7, 3, 2, 6, 8, 1, 9, 5, 4, 6, 10, 6};

  sort(ary, 0, ary.length -1);
}

static void sort(int[] ary, int leftbound, int rightbound) {
  if (leftbound >= rightbound) {
    return;
  }
  int mid = partition(ary, leftbound, rightbound);
  sort(ary, leftbound, mid-1);
  sort(ary, mid, rightbound);
}


static int partition(int[] ary, int leftbound, int rightbound) {
  int left = leftbound;
  int pivot = rightbound;
  int right = pivot - 1;
  while (left <= right) {
    while (left <= right && ary[left] <= ary[pivot]) {
      left++;
    }
    while (left <= right && ary[right] > ary[pivot]) {
      right--;
    }
    if (left < right) {
      int tmp = ary[left];
      ary[left] = ary[right];
      ary[right] = tmp;
    }
  }
  int tmp = ary[left];
  ary[left] = ary[pivot];
  ary[pivot] = tmp;

  return left;
}

计数排序
非比较排序 桶排序的一种
